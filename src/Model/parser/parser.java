
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Model.parser;

import Model.ast.*;
import java.util.List;

@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\013\003\000\002\002\004\000\002\014" +
    "\004\000\002\014\003\000\002\023\002\000\002\015\005" +
    "\000\002\024\002\000\002\015\005\000\002\025\002\000" +
    "\002\015\005\000\002\026\002\000\002\015\005\000\002" +
    "\027\002\000\002\015\005\000\002\030\002\000\002\003" +
    "\010\000\002\031\002\000\002\003\012\000\002\002\006" +
    "\000\002\007\005\000\002\016\004\000\002\017\004\000" +
    "\002\004\005\000\002\004\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\005\005\000\002\005\003\000\002\010\003" +
    "\000\002\010\003\000\002\006\005\000\002\006\003\000" +
    "\002\011\003\000\002\011\003\000\002\020\005\000\002" +
    "\020\003\000\002\020\003\000\002\021\003\000\002\022" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\014\004\020\010\005\012\012\013\007\017" +
    "\010\001\002\000\024\002\ufffe\004\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\013\ufffe\017\ufffe\001\002\000" +
    "\014\004\020\010\005\012\012\013\007\017\010\001\002" +
    "\000\004\002\102\001\002\000\004\017\010\001\002\000" +
    "\034\005\uffd8\014\uffd8\016\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\001\002\000\004\014\ufff7\001\002\000\004\017\010" +
    "\001\002\000\004\014\ufff9\001\002\000\004\014\ufffd\001" +
    "\002\000\016\002\001\004\020\010\005\012\012\013\007" +
    "\017\010\001\002\000\004\014\ufffb\001\002\000\004\014" +
    "\ufff5\001\002\000\010\015\025\017\010\020\023\001\002" +
    "\000\004\021\022\001\002\000\010\015\025\017\010\020" +
    "\023\001\002\000\032\005\uffd9\014\uffd9\016\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\001\002\000\026\005\uffea\014\uffea\016\uffea" +
    "\022\041\023\045\026\042\027\046\030\043\031\051\032" +
    "\044\001\002\000\010\015\025\017\010\020\023\001\002" +
    "\000\032\005\uffdf\014\uffdf\016\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\001\002\000\032\005\uffdb\014\uffdb\016\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\001\002\000\032\005\uffe3\014\uffe3\016\uffe3\022" +
    "\uffe3\023\uffe3\024\035\025\034\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\001\002\000\004\014\uffee\001\002\000" +
    "\032\005\uffda\014\uffda\016\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\001" +
    "\002\000\010\015\025\017\010\020\023\001\002\000\010" +
    "\015\uffdd\017\uffdd\020\uffdd\001\002\000\010\015\uffde\017" +
    "\uffde\020\uffde\001\002\000\032\005\uffe0\014\uffe0\016\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\001\002\000\004\016\040\001\002" +
    "\000\032\005\uffdc\014\uffdc\016\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\001\002\000\010\015\uffe1\017\uffe1\020\uffe1\001\002\000" +
    "\010\015\uffe9\017\uffe9\020\uffe9\001\002\000\010\015\uffe7" +
    "\017\uffe7\020\uffe7\001\002\000\010\015\uffe5\017\uffe5\020" +
    "\uffe5\001\002\000\010\015\uffe2\017\uffe2\020\uffe2\001\002" +
    "\000\010\015\uffe8\017\uffe8\020\uffe8\001\002\000\010\015" +
    "\025\017\010\020\023\001\002\000\010\015\025\017\010" +
    "\020\023\001\002\000\010\015\uffe6\017\uffe6\020\uffe6\001" +
    "\002\000\014\005\uffeb\014\uffeb\016\uffeb\022\041\023\045" +
    "\001\002\000\032\005\uffe4\014\uffe4\016\uffe4\022\uffe4\023" +
    "\uffe4\024\035\025\034\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\001\002\000\004\005\055\001\002\000\014\004" +
    "\020\010\005\012\012\013\007\017\010\001\002\000\020" +
    "\004\020\006\ufff3\007\061\010\005\012\012\013\007\017" +
    "\010\001\002\000\004\006\065\001\002\000\024\002\uffff" +
    "\004\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013" +
    "\uffff\017\uffff\001\002\000\014\004\020\010\005\012\012" +
    "\013\007\017\010\001\002\000\016\004\020\006\ufff1\010" +
    "\005\012\012\013\007\017\010\001\002\000\004\006\064" +
    "\001\002\000\004\014\ufff0\001\002\000\004\014\ufff2\001" +
    "\002\000\004\014\067\001\002\000\024\002\ufff4\004\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\017" +
    "\ufff4\001\002\000\004\014\071\001\002\000\024\002\ufffa" +
    "\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\017\ufffa\001\002\000\004\014\073\001\002\000\024" +
    "\002\ufffc\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\017\ufffc\001\002\000\004\014\075\001\002" +
    "\000\024\002\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\017\ufff8\001\002\000\004\014\uffed" +
    "\001\002\000\004\014\100\001\002\000\024\002\ufff6\004" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\017\ufff6\001\002\000\004\014\uffec\001\002\000\004\002" +
    "\000\001\002\000\016\004\020\010\005\011\104\012\012" +
    "\013\007\017\010\001\002\000\010\015\025\017\010\020" +
    "\023\001\002\000\004\014\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\024\002\015\003\013\007\012\013\005\014" +
    "\014\015\003\016\010\017\016\022\020\001\001\000\002" +
    "\001\001\000\022\002\015\003\013\007\012\014\102\015" +
    "\003\016\010\017\016\022\020\001\001\000\002\001\001" +
    "\000\004\022\100\001\001\000\002\001\001\000\004\026" +
    "\076\001\001\000\004\022\075\001\001\000\004\025\073" +
    "\001\001\000\004\023\071\001\001\000\020\002\015\003" +
    "\013\007\012\015\057\016\010\017\016\022\020\001\001" +
    "\000\004\024\067\001\001\000\004\027\065\001\001\000" +
    "\016\004\053\005\023\006\027\020\025\021\026\022\031" +
    "\001\001\000\002\001\001\000\016\004\030\005\023\006" +
    "\027\020\025\021\026\022\031\001\001\000\002\001\001" +
    "\000\006\010\046\012\047\001\001\000\016\004\036\005" +
    "\023\006\027\020\025\021\026\022\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\035\021\026" +
    "\022\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\052" +
    "\020\025\021\026\022\031\001\001\000\014\005\051\006" +
    "\027\020\025\021\026\022\031\001\001\000\002\001\001" +
    "\000\004\010\046\001\001\000\004\011\032\001\001\000" +
    "\002\001\001\000\022\002\015\003\013\007\012\014\055" +
    "\015\003\016\010\017\016\022\020\001\001\000\022\002" +
    "\015\003\013\007\012\015\057\016\010\017\016\022\020" +
    "\030\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\002\015\003\013\007\012\014\061\015\003\016\010" +
    "\017\016\022\020\001\001\000\022\002\015\003\013\007" +
    "\012\015\057\016\010\017\016\022\020\031\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\015\003\013\007\012\015\057\016\010\017\016" +
    "\022\020\001\001\000\016\004\104\005\023\006\027\020" +
    "\025\021\026\022\031\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}







    // Importar clases u objetos que puedas necesitar en el código generado
    import java.util.Scanner;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // DOCUMENT ::= MODELNAME ModelTypeT InputsT OutputsT ModelT 
            {
              Document RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ModelName mn = (ModelName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ModelType mt = (ModelType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Inputs i = (Inputs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Outputs o = (Outputs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Model m = (Model)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Document(mn,mt,i,o,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DOCUMENT",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= DOCUMENT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Document start_val = (Document)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MODELNAME ::= Model_Name TwoPoints FreeText 
            {
              ModelName RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ModelName(m,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODELNAME",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ModelTypeT ::= Model_Type TwoPoints FreeText 
            {
              ModelType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ModelType(t, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ModelTypeT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InputsT ::= Inputs OpenBrace InputsListT CloseBrace 
            {
              Inputs RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InputsList i = (InputsList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Inputs(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputsT",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InputsListT ::= InputT 
            {
              InputsList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Input i = (Input)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InputsList(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputsListT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InputsListT ::= InputT InputsListT 
            {
              InputsList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Input i = (Input)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InputsList l = (InputsList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InputsList(i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputsListT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InputT ::= Input OpenBrace InputNameT InputTypeT CloseBrace 
            {
              Input RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		InputName i = (InputName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InputType t = (InputType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Input(i,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // InputNameT ::= Input_Name TwoPoints FreeText 
            {
              InputName RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InputName(i,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputNameT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // InputTypeT ::= Input_Type TwoPoints NUMBER 
            {
              InputType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InputType(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputTypeT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // InputTypeT ::= Input_Type TwoPoints CATEGORICAL 
            {
              InputType RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InputType(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputTypeT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // InputTypeT ::= Input_Type TwoPoints BINARY 
            {
              InputType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InputType(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InputTypeT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OutputsT ::= Outputs OpenBrace OutputsListT CloseBrace 
            {
              Outputs RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OutputsList l = (OutputsList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Outputs(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OutputsT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OutputsListT ::= OutputT 
            {
              OutputsList RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Output o = (Output)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OutputsList(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OutputsListT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OutputsListT ::= OutputT OutputsListT 
            {
              OutputsList RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Output o = (Output)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OutputsList l = (OutputsList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OutputsList(o, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OutputsListT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OutputT ::= Output OpenBrace OutputNameT OutputTypeT CloseBrace 
            {
              Output RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OutputName i = (OutputName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OutputType t = (OutputType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Output(i,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OutputT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OutputNameT ::= Output_Name TwoPoints FreeText 
            {
              OutputName RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OutputName(o , t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OutputNameT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OutputTypeT ::= Output_Type TwoPoints NUMBER 
            {
              OutputType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OutputType(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OutputTypeT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OutputTypeT ::= Output_Type TwoPoints CATEGORICAL 
            {
              OutputType RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OutputType(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OutputTypeT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OutputTypeT ::= Output_Type TwoPoints BINARY 
            {
              OutputType RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OutputType(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OutputTypeT",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ModelT ::= Model OpenBrace MoreLayersT CloseBrace 
            {
              Model RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MoreLayers m = (MoreLayers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Model(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ModelT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MoreLayersT ::= LayersT 
            {
              MoreLayers RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Layers l = (Layers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MoreLayers(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MoreLayersT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MoreLayersT ::= LayersT MoreLayersT 
            {
              MoreLayers RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Layers l = (Layers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MoreLayers m = (MoreLayers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MoreLayers(l,m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MoreLayersT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LayersT ::= Layers OpenBrace ListLayersT CloseBrace 
            {
              Layers RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListLayers l = (ListLayers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Layers(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LayersT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListLayersT ::= LayerT 
            {
              ListLayers RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Layer l = (Layer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListLayers(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLayersT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListLayersT ::= LayerT ListLayersT 
            {
              ListLayers RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Layer t = (Layer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListLayers l = (ListLayers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListLayers(t,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListLayersT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LayerT ::= Layer OpenBrace LayerNameT LayerParamsT CloseBrace 
            {
              Layer RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LayerName l = (LayerName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LayerParams f = (LayerParams)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Layer(l,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LayerT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LayerNameT ::= Layer_Name TwoPoints FreeText 
            {
              LayerName RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LayerName(l,f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LayerNameT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LayerParamsT ::= Layer_Params TwoPoints OpenPlaneBrace ParamNumbersT ClosePlaneBrace 
            {
              LayerParams RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParamNumbers t = (ParamNumbers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LayerParams(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LayerParamsT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParamNumbersT ::= NUM 
            {
              ParamNumbers RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int n = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamNumbers(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamNumbersT",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParamNumbersT ::= NUM Comma ParamNumbersT 
            {
              ParamNumbers RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int n = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamNumbers p = (ParamNumbers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamNumbers(n, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamNumbersT",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

